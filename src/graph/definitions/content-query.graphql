type Query {
  allContentQueries(propertyId: String!, pagination: PaginationInput = {}, sort: ContentQuerySortInput = {}): ContentQueryConnection!
  contentQuery(input: ContentQueryInput!): ContentQuery!
  testContentQuery(input: ModelIdInput!): ContentQueryTest!
}

type Mutation {
  createContentQuery(input: CreateContentQueryInput!): ContentQuery!
  updateContentQuery(input: UpdateContentQueryInput!): ContentQuery!
  deleteContentQuery(input: ModelIdInput!): String!
}

input ContentQueryInput {
  id: String!
  propertyId: String!
}

type ContentQueryConnection {
  totalCount: Int!
  edges: [ContentQueryEdge]!
  pageInfo: PageInfo!
}

type ContentQueryEdge {
  node: ContentQuery!
  cursor: Cursor!
}

input ContentQuerySortInput {
  field: ContentQuerySortField! = createdAt
  order: Int! = -1
}

input ContentQueryPayloadInput {
  name: String!
  propertyId: String!
  criteria: [ContentQueryCriteriaInput!]!
}

enum ContentQueryCriteriaModelField {
  Company
  Section
  Taxonomy
}

input ContentQueryCriteriaInput {
  type: ContentQueryCriteriaModelField!
  ids: [Int!]!
}

input CreateContentQueryInput {
  payload: ContentQueryPayloadInput!
}

input UpdateContentQueryInput {
  id: String!
  payload: ContentQueryPayloadInput!
}

enum ContentQuerySortField {
  name
  createdAt
  updatedAt
}

type ContentQuery {
  id: String!
  name: String!
  criteria: [ContentQueryCriteria]
  createdBy: User
  updatedBy: User
  createdAt: Date
  updatedAt: Date
}

type ContentQueryTest {
  contentCount: Int!
}

union ContentQueryItem = Taxonomy | Section | Company

type ContentQueryCriteria {
  type: ContentQueryCriteriaModelField!
  items: [ContentQueryItem]!
}
